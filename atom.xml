<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>玄著</title>
  
  <subtitle>功不唐捐，玉汝于成</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://Shadowmaple.github.io/"/>
  <updated>2019-05-11T14:31:38.135Z</updated>
  <id>https://Shadowmaple.github.io/</id>
  
  <author>
    <name>Shadow Zhang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux的文件权限</title>
    <link href="https://Shadowmaple.github.io/2019/05/10/Linux-file-permissions-md/"/>
    <id>https://Shadowmaple.github.io/2019/05/10/Linux-file-permissions-md/</id>
    <published>2019-05-09T16:14:29.000Z</published>
    <updated>2019-05-11T14:31:38.135Z</updated>
    
    <content type="html"><![CDATA[<h1 id="权限身份"><a href="#权限身份" class="headerlink" title="权限身份"></a>权限身份</h1><p>三种身份：</p><ol><li>用户 User</li><li>群组 Group</li><li>其他人 Others</li></ol><p>用户身份和用户组记录的文件：</p><ul><li>/etc/passwd ： 存储系统账户、一般用户和root账户的相关信息（默认情况下）</li><li>/etc/shadow ： 记录个人密码</li><li>/etc/group ： 记录所有组名</li></ul><h1 id="文件属性"><a href="#文件属性" class="headerlink" title="文件属性"></a>文件属性</h1><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">➜  HomeWorks 21:15:00 git:(master) ls -l</span><br><span class="line">total 132</span><br><span class="line">-rw-rw-r--<span class="number"> 1 </span>lawler lawler<span class="number"> 26041 </span>4月 <span class="number"> 17 </span>21:19 apiDoc.yaml</span><br><span class="line">-rw-rw-r--<span class="number"> 1 </span>lawler lawler <span class="number"> 9355 </span>4月 <span class="number"> 17 </span>21:20 api.md</span><br><span class="line">drwxrwxr-x<span class="number"> 5 </span>lawler lawler <span class="number"> 4096 </span>5月  <span class="number"> 4 </span>14:58 app</span><br><span class="line">-rw-r--r--<span class="number"> 1 </span>lawler lawler<span class="number"> 32768 </span>4月 <span class="number"> 23 </span>09:48 app.db</span><br><span class="line">-rw-rw-r--<span class="number"> 1 </span>lawler lawler<span class="number"> 16384 </span>4月 <span class="number"> 25 </span>22:42 celerybeat-schedule</span><br><span class="line">-rw-rw-r--<span class="number"> 1 </span>lawler lawler  <span class="number"> 201 </span>4月 <span class="number"> 16 </span>15:22 celeryout.file</span><br><span class="line">-rw-rw-r--<span class="number"> 1 </span>lawler lawler  <span class="number"> 194 </span>4月 <span class="number"> 16 </span>08:08 celery_run.py</span><br><span class="line">-rw-rw-r--<span class="number"> 1 </span>lawler lawler <span class="number"> 1199 </span>4月 <span class="number"> 23 </span>09:49 config.py</span><br><span class="line">-rw-rw-r--<span class="number"> 1 </span>lawler lawler   <span class="number"> 97 </span>5月  <span class="number"> 4 </span>23:44 manage.py</span><br><span class="line">-rw-rw-r--<span class="number"> 1 </span>lawler lawler  <span class="number"> 244 </span>4月 <span class="number"> 16 </span>15:19 myout.file</span><br><span class="line">drwxrwxr-x<span class="number"> 2 </span>lawler lawler <span class="number"> 4096 </span>4月 <span class="number"> 23 </span>09:49 __pycache__</span><br><span class="line">-rw-rw-r--<span class="number"> 1 </span>lawler lawler   <span class="number"> 55 </span>3月 <span class="number"> 17 </span>00:14 README.md</span><br><span class="line">-rw-rw-r--<span class="number"> 1 </span>lawler lawler  <span class="number"> 192 </span>4月 <span class="number"> 17 </span>21:48 requirement.txt</span><br><span class="line">-rw-rw-r--<span class="number"> 1 </span>lawler lawler  <span class="number"> 116 </span>3月 <span class="number"> 30 </span>17:36 run.sh</span><br><span class="line">-rw-rw-r--<span class="number"> 1 </span>lawler lawler  <span class="number"> 873 </span>3月 <span class="number"> 17 </span>12:00 test.py</span><br></pre></td></tr></table></figure><p>第一栏：文件的类型和权限<br>第一个字符表示文件的类型，permssion<br>d是目录，【-】是文件，【l】是链接文件，【b】为设备文件里的可供存储的周边设备，【c】为设备文件里面的串行端口设备，如键盘鼠标（一次性读取设备）<br>接下来的字符<br>rwx：可读可写可执行（read, write, execute）<br>分为三组，分别是文件拥有者的权限，该用户组的权限，其他人的权限</p><p>第二栏：链接节点数，incode<br>第三栏：拥有者账号<br>第四栏：所属用户组<br>第五栏：容量大小，默认为 Bytes<br>第六栏：最近的修改时间。格式为日期（月/日）和时间，但若时间过久远，便会仅显示日期和年份。使用<code>ls -l --full-time</code>显示完整的时间格式<br>第七栏：文件名</p><h1 id="权限意义"><a href="#权限意义" class="headerlink" title="权限意义"></a>权限意义</h1><table><thead><tr><th style="text-align:center">组件</th><th style="text-align:center">ｒ</th><th style="text-align:center">w</th><th style="text-align:center">x</th></tr></thead><tbody><tr><td style="text-align:center">文件</td><td style="text-align:center">读取文件内容</td><td style="text-align:center">修改文件内容</td><td style="text-align:center">执行文件</td></tr><tr><td style="text-align:center">目录</td><td style="text-align:center">读到文件名，读取目录结构列表</td><td style="text-align:center">修改文件，包括增删文件、更名、移动</td><td style="text-align:center">进入目录</td></tr></tbody></table><p>注：</p><ol><li>在 Linux 下，[x] 权限决定文件能否被执行，这和 Windows 有所不同</li><li>文件有 [w] 权限只能对文件内容进行修改，不包含该文件的删除</li><li>若目录无 [r] 权限，则无法 list ，在某些系统和shell上甚至无法使用 [tab] 进行自动补全</li><li>从网络上下载一个文件时，其属性和权限会发生改变</li></ol><h1 id="修改文件属性和权限"><a href="#修改文件属性和权限" class="headerlink" title="修改文件属性和权限"></a>修改文件属性和权限</h1><p>chgrp： 修改文件所属用户组<br>chown： 修改文件拥有者以及用户组<br>chmod： 修改文件权限</p><h2 id="chgrp"><a href="#chgrp" class="headerlink" title="chgrp"></a>chgrp</h2><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式</span></span><br><span class="line"><span class="variable">$ </span>chgrp [option] grouup filename</span><br><span class="line"></span><br><span class="line"><span class="comment"># -R 为递归修改</span></span><br><span class="line"><span class="variable">$ </span>chgrp -R lawler blog/</span><br></pre></td></tr></table></figure><h2 id="chown"><a href="#chown" class="headerlink" title="chown"></a>chown</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式</span></span><br><span class="line">$ chown [option]<span class="built_in"> user </span>filename</span><br><span class="line">$ chown [option] user:group filename    # 也可用小数点[.]来间隔</span><br><span class="line"></span><br><span class="line"><span class="comment"># 例子</span></span><br><span class="line"><span class="comment"># chown lawler:lawler test.c</span></span><br></pre></td></tr></table></figure><h2 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a>chmod</h2><p>数字类型权限表示：<code>rwx</code> –&gt; 421<br>符号类型权限表示：</p><ul><li><code>+ - =</code> –&gt; 加入，移除，设置</li><li><code>u g o a</code> –&gt; user，group，others，all</li></ul><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式</span></span><br><span class="line"><span class="variable">$ </span>chmod [option] mode filename</span><br><span class="line"></span><br><span class="line"><span class="comment"># 例子</span></span><br><span class="line"><span class="comment"># 数字类型修改</span></span><br><span class="line"><span class="variable">$ </span>chmod <span class="number">654</span> test.sh     <span class="comment"># 更改后为 -rw-r-xr--</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 符号类型修改</span></span><br><span class="line"><span class="variable">$ </span>chmod u=rwx,go=rx test.sh     <span class="comment"># 设置user为读写执行，用户组和其他为读执行</span></span><br><span class="line"><span class="variable">$ </span>chmod -R a+x blog/       <span class="comment"># 都加上可执行权限（该目录递归添加）</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      对于Linux文件权限部分的所做笔记与少许总结
    
    </summary>
    
      <category term="Linux" scheme="https://Shadowmaple.github.io/categories/Linux/"/>
    
    
      <category term="linux" scheme="https://Shadowmaple.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Hexo搭建github博客</title>
    <link href="https://Shadowmaple.github.io/2019/04/16/Hexo%E6%90%AD%E5%BB%BAgithub%E5%8D%9A%E5%AE%A2/"/>
    <id>https://Shadowmaple.github.io/2019/04/16/Hexo搭建github博客/</id>
    <published>2019-04-16T13:40:05.000Z</published>
    <updated>2019-04-18T12:39:35.484Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是-Hexo？"><a href="#什么是-Hexo？" class="headerlink" title="什么是 Hexo？"></a>什么是 Hexo？</h1><blockquote><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p></blockquote><p>搭建过程或许有那么点小繁琐<del>（其实挺麻烦的）</del>，但一旦搭建完成，发表博文是极简单，极舒服的。<br>只需要几个简单命令，你就可以完成一切。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo n <span class="comment">#写文章</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo g <span class="comment">#生成</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo d <span class="comment">#部署，可与hexo g合并为 hexo d -g</span></span></span><br></pre></td></tr></table></figure></p><h1 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h1><ul><li>已安装git</li><li>已有github账号</li><li>已有node.js</li></ul><h1 id="安装npm"><a href="#安装npm" class="headerlink" title="安装npm"></a>安装npm</h1><p>可以直接apt安装，也可以去官网下载node.js包，然后解压安装。在此用apt安装：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install npm</span></span><br></pre></td></tr></table></figure></p><p>因为npm的源在国外，没翻墙的话速度会很慢（感觉翻墙了效果也不是很大），可以改成国内的淘宝源<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm config list   <span class="comment">#查看配置</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org  <span class="comment">#换源</span></span></span><br></pre></td></tr></table></figure></p><h1 id="hexo本地搭建"><a href="#hexo本地搭建" class="headerlink" title="hexo本地搭建"></a>hexo本地搭建</h1><h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。一条命令即可解决：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo npm install -g hexo-cli</span></span><br></pre></td></tr></table></figure></p><p>如果 npm 安装 hexo 失败, 则很有可能是权限问题, 或者npm与node的版本不兼容（很少出现）</p><blockquote><p><a href="https://blog.csdn.net/cc18868876837/article/details/81542282" target="_blank" rel="noopener">npm install安装失败问题</a></p></blockquote><h2 id="Hexo初始化"><a href="#Hexo初始化" class="headerlink" title="Hexo初始化"></a>Hexo初始化</h2><p>创建一个目录用来作为你的 blog 目录，并在该目录中进行Hexo的初始化：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mkdir &lt;folder&gt;</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> &lt;folder&gt;</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo init</span></span><br></pre></td></tr></table></figure></p><p>也可以直接<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo init &lt;folder&gt;</span></span><br></pre></td></tr></table></figure></p><p>等一会儿如果出现橙色的 <code>WARN</code> 没关系，只要不出现红色的 <code>ERROR</code> 就行<br>执行后，可能会出现如下的警告，安装依赖项失败，则要手动运行 npm 安装<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WARN  Failed to install dependencies. Please run 'npm install' manually!</span><br></pre></td></tr></table></figure></p><p>手动运行安装(直接输入即可)<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install</span></span><br></pre></td></tr></table></figure></p><p>这样，hexo会帮你在该目录下生成相应的各种文件：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">│   ├── draft.md</span><br><span class="line">│   ├── page.md</span><br><span class="line">│   └── post.md</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br><span class="line">    └── landscape</span><br></pre></td></tr></table></figure></p><p>至此，完成了Hexo的初始化</p><h2 id="本地启动"><a href="#本地启动" class="headerlink" title="本地启动"></a>本地启动</h2><p>Hexo 3.0 把服务器独立成了个别模块，但要先安装 hexo-server 才能使用。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo npm install hexo-server --save</span></span><br></pre></td></tr></table></figure></p><p>之后就可以进行本地的预览了<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo g    <span class="comment">#等同于hexo generate, 生成静态文件</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo s    <span class="comment">#等同于hexo server, 在本地服务器运行</span></span></span><br></pre></td></tr></table></figure></p><p>指定端口<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo s -p 2333</span></span><br></pre></td></tr></table></figure></p><p>至此，Hexo博客已经在本地成功搭建<br>停止：<code>ctrl+c</code></p><h1 id="将本地Hexo博客推送到GithubPages"><a href="#将本地Hexo博客推送到GithubPages" class="headerlink" title="将本地Hexo博客推送到GithubPages"></a>将本地Hexo博客推送到GithubPages</h1><h2 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h2><p>仓库名为：<code>&lt;Github账号名称&gt;.github.io</code>，github会自动将它识别为Ｇithub Pages所属的仓库，并开启博客的站点链接</p><h2 id="安装-hexo-deployer-git-插件"><a href="#安装-hexo-deployer-git-插件" class="headerlink" title="安装 hexo-deployer-git 插件"></a>安装 hexo-deployer-git 插件</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo npm <span class="keyword">install</span> hexo-deployer-git <span class="comment">--save</span></span><br></pre></td></tr></table></figure><h2 id="修改站点目录下的-config-yml"><a href="#修改站点目录下的-config-yml" class="headerlink" title="修改站点目录下的_config.yml"></a>修改站点目录下的<code>_config.yml</code></h2><p>在文件末尾修改为：<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># Deployment</span></span><br><span class="line"><span class="meta">## Docs: https:<span class="comment">//hexo.io/docs/deployment.html</span></span></span><br><span class="line"><span class="symbol">deploy:</span></span><br><span class="line"><span class="symbol">  type:</span> git</span><br><span class="line"><span class="symbol">  repo:</span> git@github.com:<span class="params">&lt;Github账号名称&gt;</span>/<span class="params">&lt;Github账号名称&gt;</span>.github.io.git</span><br><span class="line"><span class="symbol">  branch:</span> master</span><br></pre></td></tr></table></figure></p><p>注：上面的地址可以是ssh地址，也可以是https地址</p><h2 id="添加SSH-key"><a href="#添加SSH-key" class="headerlink" title="添加SSH key"></a>添加SSH key</h2><h3 id="生成ssh密钥"><a href="#生成ssh密钥" class="headerlink" title="生成ssh密钥"></a>生成ssh密钥</h3><p>输入以下命令，回车三下（默认值）即可：<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>ssh-keygen -t rsa -C <span class="string">"邮箱地址"</span></span><br></pre></td></tr></table></figure></p><h3 id="将密钥添加到-github"><a href="#将密钥添加到-github" class="headerlink" title="将密钥添加到 github"></a>将密钥添加到 github</h3><ol><li>打开github –&gt; Settings –&gt; SSH and GPG keys –&gt; New SSH key</li><li>复制密钥文件内容（路径：<code>~/.ssh/id_rsa.pub</code>），粘贴到 New SSH Key 打开的 “Key” 之中即可，title 可随意，可不填。</li><li><p>测试是否添加成功，在命令行依次输入以下命令，返回<code>You’ve successfully authenticated</code>即成功：</p> <figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>ssh -T git<span class="variable">@github</span>.com</span><br></pre></td></tr></table></figure></li></ol><h2 id="推送到GithubPages"><a href="#推送到GithubPages" class="headerlink" title="推送到GithubPages"></a>推送到GithubPages</h2><p>输入以下命令， 返回<code>INFO Deploy done: git</code>即成功推送<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo g</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo d</span></span><br></pre></td></tr></table></figure></p><p>等待1分钟左右，访问博客地址即可： <code>https://&lt;Github账号名称&gt;.github.io</code></p><p>可以看到初始便有一篇《Hello world》文章</p><h2 id="错误分析"><a href="#错误分析" class="headerlink" title="错误分析"></a>错误分析</h2><ul><li>当遇到部署出错或部署后的网页存在偏差时，建议先清理下缓存：<code>hexo clean</code></li></ul><p>我遇到 Permission denied 问题，可能你们也会踩到这个坑</p><blockquote><p><a href="https://blog.csdn.net/Zzz_Zzz_Z/article/details/80730921" target="_blank" rel="noopener">Permission denied问题</a><br><a href="http://www.cnblogs.com/xsilence/p/6001938.html" target="_blank" rel="noopener">针对github权限导致hexo部署失败的解决方案</a></p></blockquote><p>还有这一篇<a href="https://www.simon96.online/2018/10/12/hexo-tutorial/" target="_blank" rel="noopener">博文</a>关于错误分析罗列得比较全</p><h2 id="hexo指令"><a href="#hexo指令" class="headerlink" title="hexo指令"></a>hexo指令</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">help</span>       <span class="comment">#查看帮助</span></span><br><span class="line">hexo init       <span class="comment">#初始化一个目录</span></span><br><span class="line">hexo clean      <span class="comment">#清除缓存，最好每次执行命令前先清理缓存</span></span><br><span class="line">hexo generate   <span class="comment">#生成网页，可以在 public 目录查看整个网站的文件</span></span><br><span class="line">hexo <span class="keyword">server</span>     <span class="comment">#本地预览，'Ctrl+C'关闭</span></span><br><span class="line">hexo deploy     <span class="comment">#部署.deploy目录</span></span><br><span class="line">hexo <span class="keyword">new</span> <span class="string">"postName"</span>         <span class="comment">#新建文章</span></span><br><span class="line">hexo <span class="keyword">new</span> page <span class="string">"pageName"</span>    <span class="comment">#新建页面</span></span><br></pre></td></tr></table></figure><h1 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h1><h2 id="配置站点信息"><a href="#配置站点信息" class="headerlink" title="配置站点信息"></a>配置站点信息</h2><h3 id="更改标题，作者，语言等"><a href="#更改标题，作者，语言等" class="headerlink" title="更改标题，作者，语言等"></a>更改标题，作者，语言等</h3><p>修改站点配置文件(<code>_config.yml</code>)，以博主的设置为例<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># Site</span></span><br><span class="line"><span class="symbol">title:</span> 玄著 </span><br><span class="line"><span class="symbol">subtitle:</span> 记录点滴  <span class="meta">#副标题，在主标题之下显示</span></span><br><span class="line"><span class="symbol">description:</span> Coding everyday, change everyday   <span class="meta">#描述，在”作者“之下显示</span></span><br><span class="line"><span class="symbol">keywords:</span>           <span class="meta">#站点关键字，可用于被搜索引擎捕获</span></span><br><span class="line"><span class="symbol">author:</span> Shadow Zhang    <span class="meta">#作者名</span></span><br><span class="line"><span class="symbol">language:</span> <span class="built_in">zh</span>-CN     <span class="meta">#语言，简体中文，更多请见官方文档</span></span><br><span class="line"><span class="symbol">timezone:</span>           <span class="meta">#时区</span></span><br></pre></td></tr></table></figure></p><p>这样就算成自己的博客了2333</p><h1 id="写博文"><a href="#写博文" class="headerlink" title="写博文"></a>写博文</h1><h2 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h2><p>执行命令，生成指定名称的文章至<code>source/_posts/postName.md</code><br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo <span class="keyword">new</span> <span class="type"></span>[layout] <span class="string">"postName"</span></span><br></pre></td></tr></table></figure></p><p>其中layout是可选参数，默认值为post。有哪些 layout 呢，请到 scaffolds 目录下查看，这些文件名称就是 layout 名称。当然你可以添加自己的 layout，方法就是添加一个文件即可，同时你也可以编辑现有的 layout，比如 post 的 layout 默认是<code>scaffolds/post.md</code></p><h2 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front-matter"></a>Front-matter</h2><p>一开始新建起来的是这样的<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">postName</span>             <span class="comment">#文章标题，可以修改，但最好不要改，后面会说到</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2019</span><span class="bullet">-04</span><span class="bullet">-13</span> <span class="number">19</span><span class="string">:43:07</span>   <span class="comment">#文章生成时间，可以任意修改</span></span><br><span class="line"><span class="string">`tags`:</span>                     <span class="comment">#文章标签，可为空</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="string">这里开始使用markdown格式输入你的正文。</span></span><br></pre></td></tr></table></figure></p><p>多个标签（yaml格式）<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">'tags':</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">python</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">linux</span></span><br></pre></td></tr></table></figure></p><p>我们可以添加其它参数，如更新时间，分类等，详见<a href="https://hexo.io/zh-cn/docs/front-matter.html" target="_blank" rel="noopener">官方文档</a></p><h2 id="文章部分显示设置"><a href="#文章部分显示设置" class="headerlink" title="文章部分显示设置"></a>文章部分显示设置</h2><p>打开主页，我们会发现主页显示的文章都是整篇显示的，这样子不太符合我们的需求。</p><h3 id="lt-more-gt-方法"><a href="#lt-more-gt-方法" class="headerlink" title="&lt;!-- more --&gt;方法"></a><code>&lt;!-- more --&gt;</code>方法</h3><p>通常情况下，在文章中可以使用 <code>&lt;!-- more --&gt;</code> 手动进行截断，这是Hexo提供的方式。这种方式可以精确控制需要显示的摘录内容，也可以让 Hexo 中的插件更好地对文章进行识别，比如markdown的显示。</p><p>使用：在需要的地方插入<code>&lt;!--more--&gt;</code>即可。</p><h3 id="其它方法"><a href="#其它方法" class="headerlink" title="其它方法"></a>其它方法</h3><p>除了Hexo提供的传统方法，大多主题都提供有其它的方式，比如 NexT 主题，提供了另外两种方式：</p><ol><li>在文章的 front-matter 中添加 description，输入文章摘录即可</li><li>自动形成摘要，将主题配置中的<code>&quot;auto_excerpt</code>项，改为true即可<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">auto_excerpt:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  length:</span> <span class="number">150</span>   <span class="comment">#默认截取的长度为，可以自行设定</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="更改主题"><a href="#更改主题" class="headerlink" title="更改主题"></a>更改主题</h1><p>网上主题有很多，前人栽树，后人乘凉，我们只要选择一个适合自己的主题即可。可以查看<a href="https://hexo.io/themes/" target="_blank" rel="noopener">主题列表</a>，但是更多的主题未被官方收录。</p><p>我选择的主题是NexT，简洁美观，有三种外观，并且现在已经更新到了v7.1了，内部已经集成了很多模块，可以很方便地实现一些动能而无需扒前端代码（卑微）。另外还有其它人气比较高的主题，诸如：material，<a href="https://github.com/A-limon/pacman" target="_blank" rel="noopener">pacman</a>，<a href="https://github.com/orderedlist/modernist" target="_blank" rel="noopener">modernist</a>，<a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="noopener">yilia</a>，<a href="https://github.com/yscoder/hexo-theme-indigo" target="_blank" rel="noopener">indigo</a>。不多说，进入正题。</p><p>更换主题其实很简单，只要克隆主题——更改设置，即可，简单吧，<del>呵呵</del>，但实践起来还是会遇到麻烦</p><h2 id="克隆主题"><a href="#克隆主题" class="headerlink" title="克隆主题"></a>克隆主题</h2><p>进入该主题的github仓库，比如<a href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener">Next</a>。不过可能会遇到一个主题有两个仓库的情况，比如next还有一个<a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">仓库</a>，但是看它的发行版本，只有v5.14，并也宣告该仓库已停止维护。所以下载哪个，看各自的版本吧。</p><p>在hexo顶级目录下，克隆到 themes 目录<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span></span><br></pre></td></tr></table></figure></p><p>可能在克隆过程中会因为速度过慢而失败，（此坑已踩，9kb/s…），解决办法参考<a href="https://blog.csdn.net/hzwwpgmwy/article/details/79043251" target="_blank" rel="noopener">此文</a></p><h2 id="启用主题"><a href="#启用主题" class="headerlink" title="启用主题"></a>启用主题</h2><p>打开站点配置文件（_config.yml）, 找到 theme 字段, 并将其值更改为 next<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: <span class="keyword">next</span></span><br></pre></td></tr></table></figure></p><h2 id="更改样式"><a href="#更改样式" class="headerlink" title="更改样式"></a>更改样式</h2><p>NexT有四种模式（其实只有三种，第三和第四个差不太多），直接更改主题配置文件（<code>themes/next/_config.yml</code>）的 scheme 参数即可<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># Schemes</span></span><br><span class="line"><span class="meta">#scheme: Muse</span></span><br><span class="line"><span class="meta">#scheme: Mist</span></span><br><span class="line"><span class="meta">#scheme: Pisces</span></span><br><span class="line">scheme: Gemini</span><br></pre></td></tr></table></figure></p><p>然后<code>hexo s</code>即可预览效果</p><h1 id="主题优化-基于next"><a href="#主题优化-基于next" class="headerlink" title="主题优化(基于next)"></a>主题优化(基于next)</h1><h2 id="添加「标签」和「分类」页面"><a href="#添加「标签」和「分类」页面" class="headerlink" title="添加「标签」和「分类」页面"></a>添加「标签」和「分类」页面</h2><p>（以添加标签页面为例）</p><p>新建标签页面<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo new page tags</span></span><br></pre></td></tr></table></figure></p><p>编辑刚新建的页面，将页面的类型设置为 tags ，主题将自动为这个页面显示标签页。文件内容如下：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2019</span><span class="bullet">-04</span><span class="bullet">-13</span> <span class="number">16</span><span class="string">:31:39</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">"tags"</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure></p><p>在菜单中添加链接。编辑 主题配置文件 ， 添加 tags 到 menu 中<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">menu:</span></span><br><span class="line"><span class="symbol">  home:</span> / || home </span><br><span class="line">  <span class="meta">#about: /about/ || user</span></span><br><span class="line"><span class="symbol">  tags:</span> <span class="meta-keyword">/tags/</span> || tags </span><br><span class="line">  <span class="meta">#categories: /categories/ || th</span></span><br><span class="line"><span class="symbol">  archives:</span> <span class="meta-keyword">/archives/</span> || archive</span><br><span class="line">  <span class="meta">#schedule: /schedule/ || calendar</span></span><br><span class="line">  <span class="meta">#sitemap: /sitemap.xml || sitemap</span></span><br><span class="line">  <span class="meta">#commonweal: /404/ || heartbeat</span></span><br></pre></td></tr></table></figure></p><p>添加“分类”或其它的菜单同理，只需把 tags 改为 categories 或其它即可。</p><p>若只是修改了主题配置文件（此坑亲测），那么点开 tags 链接会出现这样的画面：<br><img src="https://upload-images.jianshu.io/upload_images/3072214-a1cce579d49cb369.png?imageMogr2/auto-orient/" alt="tags not found"></p><h2 id="添加头像"><a href="#添加头像" class="headerlink" title="添加头像"></a>添加头像</h2><p>在<code>themes/next/_config.yml</code>件中搜索 avatar ：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Sidebar Avatar</span></span><br><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="comment"># In theme directory (source/images): /images/avatar.gif</span></span><br><span class="line">  <span class="comment"># In site directory (source/uploads): /uploads/avatar.gif</span></span><br><span class="line">  <span class="comment"># You can also use other linking images.</span></span><br><span class="line"><span class="attr">  url:</span> <span class="string">/uploads/avatar.jpg</span></span><br><span class="line">  <span class="comment"># If true, the avatar would be dispalyed in circle.</span></span><br><span class="line"><span class="attr">  rounded:</span> <span class="literal">true</span>     <span class="comment"># true为圆形，false为方形</span></span><br><span class="line">  <span class="comment"># The value of opacity should be choose from 0 to 1 to set the opacity of the avatar.</span></span><br><span class="line"><span class="attr">  opacity:</span> <span class="number">1</span>        <span class="comment"># 不透明度，0-1，0为透明</span></span><br><span class="line">  <span class="comment"># If true, the avatar would be rotated with the cursor.</span></span><br><span class="line"><span class="attr">  rotated:</span> <span class="literal">false</span>    <span class="comment"># true为旋转</span></span><br></pre></td></tr></table></figure></p><p>头像图片可以放在主题目录下，也可以放在站点目录下，我选择放在站点目录下。在站点目录的 source 目录中新建 uploads 目录，用来存放头像，url 为图片地址</p><ul><li>注意：如果图片不是正方形的话，那么 rounded 参数设为 true 的话会变成椭圆形哦（亲测..）</li></ul><h2 id="返回文章顶部并显示当前浏览进度"><a href="#返回文章顶部并显示当前浏览进度" class="headerlink" title="返回文章顶部并显示当前浏览进度"></a>返回文章顶部并显示当前浏览进度</h2><p>修改<code>themes/next/_config.yml</code>，把 false 改为 true：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Back to top in sidebar</span></span><br><span class="line"><span class="attr">b2t:</span> <span class="literal">true</span>       <span class="comment"># 返回文章顶部</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Scroll percent label in b2t button</span></span><br><span class="line"><span class="attr">scrollpercent:</span> <span class="literal">true</span>     <span class="comment"># 当前浏览进度</span></span><br></pre></td></tr></table></figure></p><h2 id="侧边栏社交小图标设置"><a href="#侧边栏社交小图标设置" class="headerlink" title="侧边栏社交小图标设置"></a>侧边栏社交小图标设置</h2><p>打开主题配置文件<code>_config.yml</code>，搜索 Social，去掉你要添加的图标前面的#号，也可以自己添加其它的社交地址。其格式为：<br><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[社交平台名]</span>: <span class="string">[社交地址]</span> || <span class="string">[图标名称]</span></span><br></pre></td></tr></table></figure></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">social</span>:</span><br><span class="line">  <span class="attribute">GitHub</span>: <span class="attribute">https</span>:<span class="comment">//github.com/Shadowmaple || github</span></span><br><span class="line">  <span class="attribute">E-Mail</span>: <span class="attribute">mailto</span>:shdwzhang<span class="variable">@gmail</span>.com || envelope</span><br><span class="line">  #<span class="attribute">Weibo</span>: <span class="attribute">https</span>:<span class="comment">//weibo.com/yourname || weibo</span></span><br><span class="line">  #<span class="attribute">Google</span>: <span class="attribute">https</span>:<span class="comment">//plus.google.com/yourname || google</span></span><br><span class="line">  #<span class="attribute">Twitter</span>: <span class="attribute">https</span>:<span class="comment">//twitter.com/yourname || twitter</span></span><br><span class="line">  <span class="number">#FB</span> <span class="attribute">Page</span>: <span class="attribute">https</span>:<span class="comment">//www.facebook.com/yourname || facebook</span></span><br><span class="line">  #VK <span class="attribute">Group</span>: <span class="attribute">https</span>:<span class="comment">//vk.com/yourname || vk</span></span><br><span class="line">  #<span class="attribute">StackOverflow</span>: <span class="attribute">https</span>:<span class="comment">//stackoverflow.com/yourname || stack-overflow</span></span><br><span class="line">  #<span class="attribute">YouTube</span>: <span class="attribute">https</span>:<span class="comment">//youtube.com/yourname || youtube</span></span><br><span class="line">  #<span class="attribute">Instagram</span>: <span class="attribute">https</span>:<span class="comment">//instagram.com/yourname || instagram</span></span><br><span class="line">  #<span class="attribute">Skype</span>: <span class="attribute">skype</span>:yourname?call|chat || skype</span><br><span class="line">  </span><br><span class="line"># 图标设置</span><br><span class="line"><span class="attribute">social_icons</span>:</span><br><span class="line">  <span class="attribute">enable</span>: true </span><br><span class="line">  <span class="attribute">icons_only</span>: false     #只显示图标</span><br><span class="line">  <span class="attribute">transition</span>: false</span><br><span class="line">  <span class="attribute">GitHub</span>: github</span><br></pre></td></tr></table></figure><ul><li>图标可以去<a href="https://fontawesome.com/icons?from=io" target="_blank" rel="noopener">Font Awesome Icon</a>网站去找，找到后复制名字到相应的位置即可。</li></ul><h2 id="文章代码主题设置"><a href="#文章代码主题设置" class="headerlink" title="文章代码主题设置"></a>文章代码主题设置</h2><p>NexT 共有5款主题供你选择，默认使用的是 白色的 normal 主题，可选的值有 normal，night， night blue， night bright， night eighties。<br>在主题文件夹的 <code>_config.yml</code> 配置文件中，定位到 <code>highlight_theme</code>，根据需求修改相应的值即可</p><h2 id="添加nest动态背景特效"><a href="#添加nest动态背景特效" class="headerlink" title="添加nest动态背景特效"></a>添加nest动态背景特效</h2><p>背景的几何线条是采用的nest效果，一个基于html5 canvas绘制的网页背景效果，非常赞！来自github的开源项目<a href="https://github.com/hustcc/canvas-nest.js" target="_blank" rel="noopener">canvas-nest</a></p><p>效果图：<br><img src="https://yixiuer.oss-cn-shanghai.aliyuncs.com/images/hexo-next-optimization-2.gif" alt="canvas动态效果图"></p><p>而幸运的是，next主题已经内部集成了这个模块，所以就不用那么麻烦地去改js代码了</p><blockquote><p><a href="https://github.com/theme-next/theme-next-canvas-nest" target="_blank" rel="noopener">查看教程</a></p></blockquote><h2 id="主页文章添加边框阴影效果"><a href="#主页文章添加边框阴影效果" class="headerlink" title="主页文章添加边框阴影效果"></a>主页文章添加边框阴影效果</h2><p>其它主题都可以这样设置。打开 <code>themes/*/source/css/_custom/custom.styl</code> ,向里面加代码:<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 主页文章添加阴影效果</span></span><br><span class="line"><span class="selector-class">.post</span> &#123;</span><br><span class="line">   <span class="attribute">margin-top</span>: <span class="number">0px</span>;</span><br><span class="line">   <span class="attribute">margin-bottom</span>: <span class="number">60px</span>;</span><br><span class="line">   <span class="attribute">padding</span>: <span class="number">25px</span>;</span><br><span class="line">   -webkit-<span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> rgba(<span class="number">202</span>, <span class="number">203</span>, <span class="number">203</span>, .<span class="number">5</span>);</span><br><span class="line">   -moz-<span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> rgba(<span class="number">202</span>, <span class="number">203</span>, <span class="number">204</span>, .<span class="number">5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="修改底部标签样式"><a href="#修改底部标签样式" class="headerlink" title="修改底部标签样式"></a>修改底部标签样式</h2><p>修改<code>themes/next/layout/_macro/post.swig</code>文件，搜索<code>rel=&quot;tag&quot;&gt;#</code>，将<code>#</code>替换成<code>&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;</code>。查看效果：<br><img src="https://qqadapt.qpic.cn/txdocpic/0/f30051c7389908eb2da8aecf0fe8af5a/0" alt="底部样式效果"></p><p>如果不成功，则把原来的静态资源给清除掉（<code>hexo clean</code>），重启服务。</p><h2 id="底部隐藏由Hexo强力驱动、主题–NexT-Mist"><a href="#底部隐藏由Hexo强力驱动、主题–NexT-Mist" class="headerlink" title="底部隐藏由Hexo强力驱动、主题–NexT.Mist"></a>底部隐藏由Hexo强力驱动、主题–NexT.Mist</h2><p>在主题配置文件中，搜索 powered，修改 enable 即可<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">powered:</span></span><br><span class="line">  <span class="comment"># Hexo link (Powered by Hexo).</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Version info of Hexo after Hexo link (vX.X.X).</span></span><br><span class="line"><span class="attr">  version:</span> <span class="literal">true</span> </span><br><span class="line"></span><br><span class="line"><span class="attr">theme:</span></span><br><span class="line">  <span class="comment"># Theme &amp; scheme info link (Theme - NexT.scheme).</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">false</span> </span><br><span class="line">  <span class="comment"># Version info of NexT after scheme info (vX.X.X).</span></span><br><span class="line"><span class="attr">  version:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><blockquote><p>更多酷炫效果请见参考文档</p></blockquote><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ul><li><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo官方文档</a></li><li><a href="https://theme-next.org/docs/getting-started/" target="_blank" rel="noopener">NexT官方文档</a></li><li><a href="https://www.simon96.online/2018/10/12/hexo-tutorial/" target="_blank" rel="noopener">【持续更新】最全Hexo博客搭建+主题优化+插件配置+常用操作+错误分析</a></li><li><a href="http://zwd596257180.gitee.io/blog/2019/04/15/hexo_manong_bog/" target="_blank" rel="noopener">码云+Hexo搭建个人博客+评论功能接入</a></li><li><a href="https://reuixiy.github.io/technology/computer/computer-aided-art/2017/06/09/hexo-next-optimization.html#fn:2" target="_blank" rel="noopener">打造个性超赞博客Hexo+NexT+GitHubPages的超深度优化</a></li></ul>]]></content>
    
    <summary type="html">
    
      简单记录一下搭建的基本过程以及遇到的一些问题
    
    </summary>
    
      <category term="Hexo" scheme="https://Shadowmaple.github.io/categories/Hexo/"/>
    
    
      <category term="linux" scheme="https://Shadowmaple.github.io/tags/linux/"/>
    
      <category term="hexo" scheme="https://Shadowmaple.github.io/tags/hexo/"/>
    
      <category term="Next" scheme="https://Shadowmaple.github.io/tags/Next/"/>
    
  </entry>
  
  <entry>
    <title>Vim操作命令</title>
    <link href="https://Shadowmaple.github.io/2019/04/15/Vim%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4/"/>
    <id>https://Shadowmaple.github.io/2019/04/15/Vim操作命令/</id>
    <published>2019-04-15T14:30:46.000Z</published>
    <updated>2019-04-15T15:17:15.664Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>简单记录一些在使用vim过程中会用到的操作<br><a id="more"></a></p><h1 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h1><p>vim有三个模式，分别是：</p><ul><li>命令模式</li><li>编辑模式<ul><li>进入：<code>[i, I, o, O, a, A, r, R]</code></li><li>退出：Esc键</li></ul></li><li>命令行模式<ul><li>进入：<code>[:, /, ?]</code></li><li>退出：Esc键</li><li>作用：查找数据，读取、保存、批量替换字符、退出、显示行号等操作</li></ul></li></ul><h1 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h1><h2 id="退出-amp-保存"><a href="#退出-amp-保存" class="headerlink" title="退出&amp;保存"></a>退出&amp;保存</h2><table><thead><tr><th style="text-align:center">command</th><th style="text-align:center">效果</th></tr></thead><tbody><tr><td style="text-align:center">:q</td><td style="text-align:center">退出</td></tr><tr><td style="text-align:center">:q!</td><td style="text-align:center">强制退出，不保存修改</td></tr><tr><td style="text-align:center">:w</td><td style="text-align:center">保存修改</td></tr><tr><td style="text-align:center">:wq</td><td style="text-align:center">保存并退出</td></tr><tr><td style="text-align:center">ZZ</td><td style="text-align:center">保存并退出</td></tr></tbody></table><h2 id="移动光标"><a href="#移动光标" class="headerlink" title="移动光标"></a>移动光标</h2><table><thead><tr><th style="text-align:center">command</th><th style="text-align:center">效果</th></tr></thead><tbody><tr><td style="text-align:center"><code>n&lt;space&gt;</code></td><td style="text-align:center">向右移动n个字符</td></tr><tr><td style="text-align:center"><code>n&lt;Enter&gt;</code></td><td style="text-align:center">向下移动n行</td></tr><tr><td style="text-align:center">+</td><td style="text-align:center">移动到非空格符的下一行</td></tr><tr><td style="text-align:center">-</td><td style="text-align:center">移动到非空格符的上一行</td></tr><tr><td style="text-align:center">[ctrl]+f</td><td style="text-align:center">向下移动一页</td></tr><tr><td style="text-align:center">[ctrl]+b</td><td style="text-align:center">向上移动一页</td></tr><tr><td style="text-align:center">[ctrl]+d</td><td style="text-align:center">向下移动半页</td></tr><tr><td style="text-align:center">[ctrl]+u</td><td style="text-align:center">向上移动半页</td></tr><tr><td style="text-align:center">0</td><td style="text-align:center">移动到最前面的字符处</td></tr><tr><td style="text-align:center">$</td><td style="text-align:center">移动到最后的字符</td></tr><tr><td style="text-align:center">H</td><td style="text-align:center">移动到此屏幕最上方一行的第一个字符</td></tr><tr><td style="text-align:center">M</td><td style="text-align:center">到屏幕中间一行的第一个字符</td></tr><tr><td style="text-align:center">L</td><td style="text-align:center">到屏幕最后一行的第一个字符</td></tr><tr><td style="text-align:center">G</td><td style="text-align:center">移动到此文件的最后一行</td></tr><tr><td style="text-align:center">nG</td><td style="text-align:center">移动到第n行</td></tr><tr><td style="text-align:center">gg</td><td style="text-align:center">移动到此文件的第一行</td></tr></tbody></table><h2 id="查找和替换"><a href="#查找和替换" class="headerlink" title="查找和替换"></a>查找和替换</h2><table><thead><tr><th style="text-align:center">command</th><th style="text-align:center">效果</th></tr></thead><tbody><tr><td style="text-align:center">/word</td><td style="text-align:center">向光标之下查找一个字符串</td></tr><tr><td style="text-align:center">?word</td><td style="text-align:center">向光标之上查找一个字符串</td></tr><tr><td style="text-align:center">n</td><td style="text-align:center">重复前一个查找操作</td></tr><tr><td style="text-align:center">N</td><td style="text-align:center">反向进行前一个查找操作</td></tr><tr><td style="text-align:center"><code>:n1,n2s/word1/word2/g</code></td><td style="text-align:center">在第n1和n2行之间寻找word1字符串，并将其替换为word2</td></tr><tr><td style="text-align:center"><code>:1,$s/word1/word2/g</code></td><td style="text-align:center">从第一行到最后一行寻找word1字符串，并将其替换为word2</td></tr><tr><td style="text-align:center"><code>:1,$s/word1/word2/gc</code></td><td style="text-align:center">从第一行到最后一行寻找word1字符串，并将其替换为word2，且在替换前显示提示字符给用户确认是否替换</td></tr><tr><td style="text-align:center">:nohl</td><td style="text-align:center">取消反白</td></tr></tbody></table><h2 id="删除、复制和粘贴"><a href="#删除、复制和粘贴" class="headerlink" title="删除、复制和粘贴"></a>删除、复制和粘贴</h2><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><table><thead><tr><th style="text-align:center">command</th><th style="text-align:center">效果</th></tr></thead><tbody><tr><td style="text-align:center">nx</td><td style="text-align:center">连续向后删除n个字符</td></tr><tr><td style="text-align:center">ndd</td><td style="text-align:center">剪切（删除）光标所在的向下n行</td></tr><tr><td style="text-align:center">dd</td><td style="text-align:center">剪切该行</td></tr><tr><td style="text-align:center">d1G</td><td style="text-align:center">剪切光标所在到第一行的所有数据</td></tr><tr><td style="text-align:center">d$</td><td style="text-align:center">剪切光标所在到最后一行的所有数据</td></tr><tr><td style="text-align:center">d0</td><td style="text-align:center">剪切光标所在处，到该行的最前面的一个字符</td></tr><tr><td style="text-align:center">[n]c[k]</td><td style="text-align:center">重复删除多个数据，k为方向按键，如5cj为向下删除5，5cl为向右删除5个字符</td></tr></tbody></table><h3 id="复制与粘贴"><a href="#复制与粘贴" class="headerlink" title="复制与粘贴"></a>复制与粘贴</h3><table><thead><tr><th style="text-align:center">command</th><th style="text-align:center">效果</th></tr></thead><tbody><tr><td style="text-align:center">yy</td><td style="text-align:center">复制所在一行</td></tr><tr><td style="text-align:center">nyy</td><td style="text-align:center">复制n行</td></tr><tr><td style="text-align:center">yn</td><td style="text-align:center">复制n+1行</td></tr><tr><td style="text-align:center">y1G</td><td style="text-align:center">复制所在行到第一行的数据</td></tr><tr><td style="text-align:center">yG</td><td style="text-align:center">复制所在行到最后一行的数据</td></tr><tr><td style="text-align:center">y0</td><td style="text-align:center">复制所在的字符到该行行首的数据</td></tr><tr><td style="text-align:center">y$</td><td style="text-align:center">复制所在的字符到该行行尾的数据</td></tr><tr><td style="text-align:center">p</td><td style="text-align:center">在下一行粘贴</td></tr><tr><td style="text-align:center">P</td><td style="text-align:center">在上一行粘贴</td></tr></tbody></table><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><table><thead><tr><th style="text-align:center">command</th><th style="text-align:center">效果</th></tr></thead><tbody><tr><td style="text-align:center">u</td><td style="text-align:center">恢复前一个操作，撤销</td></tr><tr><td style="text-align:center">ctrl+r</td><td style="text-align:center">重做上一个操作，对撤销操作而言的撤销</td></tr></tbody></table><h2 id="命令模式切换到编辑模式"><a href="#命令模式切换到编辑模式" class="headerlink" title="命令模式切换到编辑模式"></a>命令模式切换到编辑模式</h2><table><thead><tr><th style="text-align:center">command</th><th style="text-align:center">效果</th></tr></thead><tbody><tr><td style="text-align:center">i与I</td><td style="text-align:center">i 为从目标光标所在处插入，I 为在目前所在行的第一个非空格符处开始插入</td></tr><tr><td style="text-align:center">a与A</td><td style="text-align:center">a 为从所在的下一个字符处开始插入，A 为从所在行的最后一个字符处开始插入</td></tr><tr><td style="text-align:center">o与O</td><td style="text-align:center">o 为在所在的下一行处插入新的一行，O 为在目前所在处的上一行插入新的一行</td></tr><tr><td style="text-align:center">r与R</td><td style="text-align:center">r 只会替换光标所在的那个字符一次；R 会一直替换光标所在的文字，直到按下Esc为止</td></tr></tbody></table><h2 id="命令行模式的其它操作"><a href="#命令行模式的其它操作" class="headerlink" title="命令行模式的其它操作"></a>命令行模式的其它操作</h2><table><thead><tr><th style="text-align:center">command</th><th style="text-align:center">效果</th></tr></thead><tbody><tr><td style="text-align:center"><code>:! [command]</code></td><td style="text-align:center">暂时退出vi到shell执行command的显示结果，如<code>:! ls ~</code></td></tr><tr><td style="text-align:center"><code>:w [file]</code></td><td style="text-align:center">将编辑的数据保存成另一个文件</td></tr><tr><td style="text-align:center"><code>:f [file]</code></td><td style="text-align:center">在编辑的数据中，读入另一个文件的数据，即将此文件内容添加到光标所在行之后</td></tr><tr><td style="text-align:center"><code>:n1,n2 w [file]</code></td><td style="text-align:center">将n1到n2的内容保存到file文件</td></tr></tbody></table><h1 id="可视区块"><a href="#可视区块" class="headerlink" title="可视区块"></a>可视区块</h1><table><thead><tr><th style="text-align:center">command</th><th style="text-align:center">效果</th></tr></thead><tbody><tr><td style="text-align:center">v</td><td style="text-align:center">字符选择，会将光标经过的地方反白选择</td></tr><tr><td style="text-align:center">V</td><td style="text-align:center">行选择， 会将光标经过的行反白选择</td></tr><tr><td style="text-align:center">[ctrl]+v</td><td style="text-align:center">可视区块，可以用矩形的方式选择数据</td></tr><tr><td style="text-align:center">y</td><td style="text-align:center">复制反白的地方</td></tr><tr><td style="text-align:center">d</td><td style="text-align:center">删除</td></tr><tr><td style="text-align:center">p</td><td style="text-align:center">将复制的区块，在光标所在处粘贴</td></tr><tr><td style="text-align:center">[Esc]</td><td style="text-align:center">退出</td></tr></tbody></table><h1 id="多文件编辑"><a href="#多文件编辑" class="headerlink" title="多文件编辑"></a>多文件编辑</h1><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:r filename     # 在光标处，读取（写入）某个文件的全部内容，</span><br></pre></td></tr></table></figure><p>多文件编辑<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vi file1 file2    <span class="comment"># 同时打开两个文件</span></span></span><br></pre></td></tr></table></figure></p><table><thead><tr><th style="text-align:center">command</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center">:n</td><td style="text-align:center">编辑下一个文件</td></tr><tr><td style="text-align:center">:N</td><td style="text-align:center">编辑上一个文件</td></tr><tr><td style="text-align:center">:files</td><td style="text-align:center">列出目前这个vim开启的所有文件</td></tr></tbody></table><h1 id="多窗口功能"><a href="#多窗口功能" class="headerlink" title="多窗口功能"></a>多窗口功能</h1><p>多窗口同步显示：修改同步，光标移动不同步</p><table><thead><tr><th style="text-align:center">command</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center"><code>:sp [filename]</code></td><td style="text-align:center">打开一个新窗口， 若有加filename，则表示在新窗口创建一个新文件，否则表示两个窗口为一个文件内容（同步显示）</td></tr><tr><td style="text-align:center"><code>[ctrl]+ w + j</code></td><td style="text-align:center">光标移动到下方的窗口</td></tr><tr><td style="text-align:center"><code>[ctrl]+ w + k</code></td><td style="text-align:center">光标移动到上方的窗口</td></tr><tr><td style="text-align:center"><code>[ctrl]+ w + q</code></td><td style="text-align:center">退出，也可用<code>:q</code>或<code>:close</code></td></tr></tbody></table><h1 id="关键字补全"><a href="#关键字补全" class="headerlink" title="关键字补全"></a>关键字补全</h1><p>组合键，要在编辑模式下使用</p><table><thead><tr><th style="text-align:center">command</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center">ctrl+x -&gt; ctrl+n</td><td style="text-align:center">通过目前正在编辑的这个【文件的内容文字】作为关键字，予以补全</td></tr><tr><td style="text-align:center">ctrl+x -&gt; ctrl+f</td><td style="text-align:center">以当前目录内的【文件名】作为关键词，予以补全</td></tr><tr><td style="text-align:center">ctrl+x -&gt; ctrl+o</td><td style="text-align:center">以扩展名作为语法补充，以vim内置的关键词，予以补全</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;简单记录一些在使用vim过程中会用到的操作&lt;br&gt;
    
    </summary>
    
      <category term="Vim" scheme="https://Shadowmaple.github.io/categories/Vim/"/>
    
    
      <category term="linux" scheme="https://Shadowmaple.github.io/tags/linux/"/>
    
      <category term="vim" scheme="https://Shadowmaple.github.io/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>Python装饰器</title>
    <link href="https://Shadowmaple.github.io/2019/04/13/python%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
    <id>https://Shadowmaple.github.io/2019/04/13/python装饰器/</id>
    <published>2019-04-12T16:49:40.000Z</published>
    <updated>2019-04-17T02:07:10.299Z</updated>
    
    <content type="html"><![CDATA[<h1 id="为什么要用装饰器？"><a href="#为什么要用装饰器？" class="headerlink" title="为什么要用装饰器？"></a>为什么要用装饰器？</h1><p>先看一个简单的例子<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"I'm foo."</span>)</span><br><span class="line"></span><br><span class="line">foo()</span><br></pre></td></tr></table></figure></p><p>之后有了一个新需求，想要在其中添加时间，你可以这样直接添加：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    t = time.strftime(<span class="string">'%H:%M:%S'</span>, time.localtime())</span><br><span class="line">    print(<span class="string">'It\'s &#123;&#125; now.'</span>.format(t))</span><br><span class="line">    print(<span class="string">"I am foo."</span>)</span><br><span class="line"></span><br><span class="line">foo()</span><br></pre></td></tr></table></figure></p><p>先来看下效果<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">It's <span class="number">15</span>:<span class="number">15</span>:<span class="number">15</span> now.</span><br><span class="line">I am foo.</span><br></pre></td></tr></table></figure></p><p>成功达成目的，但是这样的话，我们每次都要修改函数代码，如果有多个函数的话，效率极为低下。那么这种方式呢？<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_time</span><span class="params">(func)</span>:</span></span><br><span class="line">    t = time.strftime(<span class="string">'%H:%M:%S'</span>, time.localtime())</span><br><span class="line">    print(<span class="string">'It\'s &#123;&#125; now.'</span>.format(t))</span><br><span class="line">    func()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"I am foo."</span>)</span><br><span class="line"></span><br><span class="line">get_time(foo)</span><br></pre></td></tr></table></figure></p><p>当然可以。但是这种代码已经破坏了原有的代码逻辑，执行方式改变了，之前是执行运行foo()，而现在却只能运行get_time(foo)。那么有没有更好的方式呢？答案是装饰器。</p><h1 id="什么是装饰器？"><a href="#什么是装饰器？" class="headerlink" title="什么是装饰器？"></a>什么是装饰器？</h1><p>简单来讲，装饰器就是一个在不破坏原有代码逻辑、结构的情况下对既有函数方法进行附加功能的函数或类。它的本质就是函数或类。</p><h2 id="简单的装饰器"><a href="#简单的装饰器" class="headerlink" title="简单的装饰器"></a>简单的装饰器</h2><p>首先要认识到在python中函数是一等公民，即函数也是对象，也是可以作为参数进行传递</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_time</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span></span><br><span class="line">        t = time.strftime(<span class="string">'%H:%M:%S'</span>, time.localtime())</span><br><span class="line">        print(<span class="string">'It\'s &#123;&#125; now.'</span>.format(t))</span><br><span class="line">        <span class="keyword">return</span> foo()</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"I am foo."</span>)</span><br><span class="line"></span><br><span class="line">foo = get_time(foo)</span><br><span class="line">foo()</span><br></pre></td></tr></table></figure><p>函数<code>get_time</code>就是装饰器，它把执行真正业务方法的func包裹在函数里面，看起来像foo被<code>get_time</code>装饰了。</p><h2 id="语法糖"><a href="#语法糖" class="headerlink" title="语法糖"></a>语法糖</h2><p>@符号是装饰器的语法糖，在定义函数的时候使用，避免再一次赋值操作<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_time</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span></span><br><span class="line">        t = time.strftime(<span class="string">'%H:%M:%S'</span>, time.localtime())</span><br><span class="line">        print(<span class="string">'It\'s &#123;&#125; now.'</span>.format(t))</span><br><span class="line">        <span class="keyword">return</span> foo()</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@get_time               #加上语法糖，=&gt; foo = get_time(foo)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"I am foo."</span>)</span><br></pre></td></tr></table></figure></p><h2 id="装饰器的调用顺序"><a href="#装饰器的调用顺序" class="headerlink" title="装饰器的调用顺序"></a>装饰器的调用顺序</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@a</span></span><br><span class="line"><span class="meta">@b</span></span><br><span class="line"><span class="meta">@c</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>装饰器的调用顺序是从下到上的，即<code>foo = a(b(c(foo)))</code></p><h1 id="带参数的装饰器"><a href="#带参数的装饰器" class="headerlink" title="带参数的装饰器"></a>带参数的装饰器</h1><p>装饰器的语法允许我们在调用时，提供其它参数。这样，就为装饰器的编写和使用提供了更大的灵活性。</p><h2 id="关于-args-kwargs"><a href="#关于-args-kwargs" class="headerlink" title="关于*args, **kwargs"></a>关于*args, **kwargs</h2><p>我们所要装饰的函数有很多是需要参数的，所以说我们可能会想到在wrapper()直接添加参数，但是如果函数所需要的参数个数是不确定的，那如果每次都修改所定义的装饰器，那么装饰器便失去了其普适性。所以引入了<code>*args</code> 和<code>**kwargs</code>支持接受动态参数。</p><ul><li><code>*args</code>表示任何多个无名参数，它是一个tuple</li><li><code>**kwargs</code>表示关键字参数，它是一个dict.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_time</span><span class="params">(name)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">            t = time.strftime(<span class="string">'%H:%M:%S'</span>, time.localtime())</span><br><span class="line">            print(<span class="string">'It\'s &#123;&#125; now.'</span>.format(t))</span><br><span class="line">            print(<span class="string">'I am &#123;&#125;.'</span>.format(name))</span><br><span class="line">            <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line">    <span class="keyword">return</span> decorator</span><br><span class="line"></span><br><span class="line"><span class="meta">@get_time(name='Shadow')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(name=<span class="string">'Nick'</span>)</span>:</span></span><br><span class="line">    print(<span class="string">"Hello, I'm %s."</span> %name)</span><br><span class="line"></span><br><span class="line">foo(<span class="string">'Mark'</span>)</span><br></pre></td></tr></table></figure><h1 id="类装饰器"><a href="#类装饰器" class="headerlink" title="类装饰器"></a>类装饰器</h1><p>相比函数装饰器，类装饰器具有灵活度大、高内聚、封装性等优点。使用类装饰器主要依靠类的<code>__call__</code>方法，当使用@形式将装饰器附加到函数上时，就会调用此方法。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, func)</span>:</span></span><br><span class="line">        self._func = func</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> (<span class="string">'class decorator runing'</span>)</span><br><span class="line">        self._func()</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">'class decorator ending'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@Foo</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'bar'</span>)</span><br><span class="line"></span><br><span class="line">bar()</span><br></pre></td></tr></table></figure></p><h1 id="装饰器的弊端"><a href="#装饰器的弊端" class="headerlink" title="装饰器的弊端"></a>装饰器的弊端</h1><p>虽然装饰器实现了我们的功能，但是借助这个<a href="http://www.pythontutor.com/visualize.html#mode=edit" target="_blank" rel="noopener">网站</a>来观察返回的函数foo，我们会发现其名称将不会再是原函数的名称,即它的原信息发生了改变，这说明装饰器对原函数造成了影响，这是我们不愿意见到的。所以我们使用python的<code>functools</code>包中一个装饰器<code>wraps</code>来消除这个副作用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_time</span><span class="params">(name)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></span><br><span class="line"><span class="meta">        @wraps(func)</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">            t = time.strftime(<span class="string">'%H:%M:%S'</span>, time.localtime())</span><br><span class="line">            print(<span class="string">'It\'s &#123;&#125; now.'</span>.format(t))</span><br><span class="line">            print(<span class="string">'I am &#123;&#125;.'</span>.format(name))</span><br><span class="line">            <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line">    <span class="keyword">return</span> decorator</span><br><span class="line"></span><br><span class="line"><span class="meta">@get_time(name='Shadow')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(name=<span class="string">'Nick'</span>)</span>:</span></span><br><span class="line">    print(<span class="string">"Hello, I'm %s."</span> %name)</span><br><span class="line"></span><br><span class="line">foo(<span class="string">'Mark'</span>)</span><br></pre></td></tr></table></figure><h1 id="装饰器的执行顺序"><a href="#装饰器的执行顺序" class="headerlink" title="装饰器的执行顺序"></a>装饰器的执行顺序</h1><p>装饰器的一个关键特性是，它们在被装饰的函数定义之后立即运行。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></span><br><span class="line">    print(<span class="string">"running decorator"</span>)</span><br><span class="line">    <span class="keyword">return</span> func</span><br><span class="line"></span><br><span class="line"><span class="meta">@decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"running foo"</span>)</span><br><span class="line"></span><br><span class="line">foo()</span><br></pre></td></tr></table></figure></p><p>这就有运行和导入之分。导入时：<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="keyword">import</span> decorator</span><br><span class="line"><span class="built_in">running</span> decorator</span><br></pre></td></tr></table></figure></p><p><code>foo()</code>只有在运行时才会运行</p><h1 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h1><p>明确三个变量：全局变量，局部变量和自由变量。</p><p>自由变量，指未在本地作用域中绑定的变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></span><br><span class="line">    lt = [<span class="string">'abc'</span>]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span></span><br><span class="line">        print(lt)</span><br><span class="line">        <span class="keyword">return</span> func</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure><p>在上述代码中，在<code>wrapper</code>中<code>lt</code>即是自由变量。从<code>lt = [&#39;abc&#39;]</code>到<code>return func</code>之间（包括）即是闭包。</p><p>闭包是一种函数，它会保留定义函数时存在的自由变量的绑定，这样调用函数时，虽然定义作用域不可用了，但是仍能使用那些绑定。但是只有嵌套在其他函数中的函数才可能需要处理不在全局作用域中的外部变量。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;为什么要用装饰器？&quot;&gt;&lt;a href=&quot;#为什么要用装饰器？&quot; class=&quot;headerlink&quot; title=&quot;为什么要用装饰器？&quot;&gt;&lt;/a&gt;为什么要用装饰器？&lt;/h1&gt;&lt;p&gt;先看一个简单的例子&lt;br&gt;&lt;figure class=&quot;highlight pyth
      
    
    </summary>
    
      <category term="Python" scheme="https://Shadowmaple.github.io/categories/Python/"/>
    
    
      <category term="python" scheme="https://Shadowmaple.github.io/tags/python/"/>
    
  </entry>
  
</feed>
